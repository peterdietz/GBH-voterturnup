import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.lang.StringUtils;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'peterdietz' at '4/22/17 5:43 PM' with Gradle 2.2.1
 *
 * @author peterdietz, @date 4/22/17 5:43 PM
 */
public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    public static void main(String[] args) {
        parseCSV();
    }

    public static void parseCSV() {
        try {
            File csvWard = new File("/Users/peterdietz/Projects/personal/givebackhack/voter-turnout/ward14-normal2.csv");
            File csvEviction = new File("/Users/peterdietz/Projects/personal/givebackhack/voter-turnout/cle-eviction-2017.csv");
            File csvForeclosure = new File("/Users/peterdietz/Projects/personal/givebackhack/voter-turnout/foreclosure.csv");

            String wardWrite = "/Users/peterdietz/Projects/personal/givebackhack/voter-turnout/ward14-normal2-edit.csv";

            FileWriter fileWriter = new FileWriter(wardWrite);
            CSVFormat csvFileFormat = CSVFormat.DEFAULT.withRecordSeparator('\n');
            CSVPrinter csvFilePrinter = new CSVPrinter(fileWriter, csvFileFormat);


            CSVParser parserWard = CSVParser.parse(csvWard, Charset.defaultCharset(), CSVFormat.DEFAULT);

            Integer matchesEvict = 0;
            Integer matchesForeclose = 0;
            Map<String, String> matchedPeople = new HashMap<String, String>();

            Integer row = 0;
            for (CSVRecord wardRecord : parserWard) {
                String wardName = wardRecord.get(5).trim().replaceAll(" +", " ").replaceAll("[^a-zA-Z ]", "");

                CSVParser parserEviction = CSVParser.parse(csvEviction, Charset.defaultCharset(), CSVFormat.DEFAULT);
                Boolean evicted = false;
                for(CSVRecord evictionRecord : parserEviction) {
                    String evictionName = evictionRecord.get(0).trim().replace(" +", " ").replaceAll("[^a-zA-Z ]", "");
                    Integer distance = StringUtils.getLevenshteinDistance(wardName, evictionName);
                    if(distance < 2) {
                        evicted = true;

                        matchedPeople.put(wardName, evictionName);
                        if(distance >= 0 ) {
                            System.out.println("WARD:" + wardName + " ___ " + " EVICT: " + evictionName + " DIST: " + distance);
                        }
                        matchesEvict++;
                        break;
                    }
                }

                CSVParser parserForeclosure = CSVParser.parse(csvForeclosure, Charset.defaultCharset(), CSVFormat.DEFAULT);
                Boolean foreclosed = false;
                for(CSVRecord foreclosureRecord : parserForeclosure) {
                    String foreclosureName = foreclosureRecord.get(0).trim().replaceAll(" +", " ").replaceAll("[^a-zA-Z ]", "");
                    Integer distance = StringUtils.getLevenshteinDistance(wardName, foreclosureName);
                    if(distance < 2) {
                        foreclosed = true;
                        matchedPeople.put(wardName, foreclosureName);
                        if(distance >= 0 ) {
                            System.out.println("WARD:" + wardName + " ___ " + " FORECLOSURE: " + foreclosureName + " DIST: " + distance);
                        }
                        matchesForeclose++;
                        break;
                    }
                }

                List<String> wardData = new ArrayList<String>();
                for(String element : wardRecord) {
                    wardData.add(element);
                }

                if(row == 0) {
                    wardData.add("isEvicted");
                    wardData.add("isForeclosed");
                } else {
                    wardData.add(evicted.toString());
                    wardData.add(foreclosed.toString());
                }
                csvFilePrinter.printRecord(wardData);

                row++;
            }

            fileWriter.flush();
            fileWriter.close();
            csvFilePrinter.close();

            System.out.println("MatchesEvict: " + matchesEvict + " MatchesForeclose:"  + matchesForeclose);

        } catch (IOException e) {
            System.err.println(e.getMessage());
        }
    }
}
