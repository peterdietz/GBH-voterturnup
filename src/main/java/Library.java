import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.lang.StringUtils;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'peterdietz' at '4/22/17 5:43 PM' with Gradle 2.2.1
 *
 * @author peterdietz, @date 4/22/17 5:43 PM
 */
public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    public static void main(String[] args) {
        parseCSV();
    }

    public static void parseCSV() {
        try {
            File csvWard = new File("/Users/peterdietz/Projects/personal/givebackhack/voter-turnout/ward14-normal2.csv");
            File csvEviction = new File("/Users/peterdietz/Projects/personal/givebackhack/voter-turnout/cle-eviction-2017.csv");
            File csvForeclosure = new File("/Users/peterdietz/Projects/personal/givebackhack/voter-turnout/foreclosure.csv");
            File csvLandbank = new File("/Users/peterdietz/Projects/personal/givebackhack/voter-turnout/landbank.csv");
            File csvPropertySales = new File("/Users/peterdietz/Projects/personal/givebackhack/voter-turnout/property-sales.csv");

            String wardWrite = "/Users/peterdietz/Projects/personal/givebackhack/voter-turnout/ward14-normal2-edit.csv";

            FileWriter fileWriter = new FileWriter(wardWrite);
            CSVFormat csvFileFormat = CSVFormat.DEFAULT.withRecordSeparator('\n');
            CSVPrinter csvFilePrinter = new CSVPrinter(fileWriter, csvFileFormat);


            CSVParser parserWard = CSVParser.parse(csvWard, Charset.defaultCharset(), CSVFormat.DEFAULT);

            Integer matchesEvict = 0;
            Integer matchesForeclose = 0;
            Integer matchesLandbank = 0;
            Integer matchesPropertySales = 0;

            Integer row = 0;
            for (CSVRecord wardRecord : parserWard) {
                String wardName = wardRecord.get(5).trim().replaceAll(" +", " ").replaceAll("[^a-zA-Z ]", "");
                String wardAddress = wardRecord.get(14).trim().replaceAll(" +", " ").replaceAll("[^a-zA-Z0-9 ]", "");


                CSVParser parserEviction = CSVParser.parse(csvEviction, Charset.defaultCharset(), CSVFormat.DEFAULT);
                Boolean evicted = false;
                for(CSVRecord evictionRecord : parserEviction) {
                    String evictionName = evictionRecord.get(0).trim().replace(" +", " ").replaceAll("[^a-zA-Z ]", "");
                    Integer distance = StringUtils.getLevenshteinDistance(wardName, evictionName);
                    if(distance < 2) {
                        evicted = true;

                        if(distance >= 0 ) {
                            System.out.println("WARD:" + wardName + " ___ " + " EVICT: " + evictionName + " DIST: " + distance);
                        }
                        matchesEvict++;
                        break;
                    }
                }

                CSVParser parserForeclosure = CSVParser.parse(csvForeclosure, Charset.defaultCharset(), CSVFormat.DEFAULT);
                Boolean foreclosed = false;
                for(CSVRecord foreclosureRecord : parserForeclosure) {
                    String foreclosureName = foreclosureRecord.get(0).trim().replaceAll(" +", " ").replaceAll("[^a-zA-Z ]", "");
                    Integer distance = StringUtils.getLevenshteinDistance(wardName, foreclosureName);
                    if(distance < 2) {
                        foreclosed = true;

                        if(distance >= 0 ) {
                            System.out.println("WARD:" + wardName + " ___ " + " FORECLOSURE: " + foreclosureName + " DIST: " + distance);
                        }
                        matchesForeclose++;
                        break;
                    }
                }

                CSVParser parserLandbank = CSVParser.parse(csvLandbank, Charset.defaultCharset(), CSVFormat.DEFAULT);
                Boolean landbanked = false;
                for(CSVRecord landbankRecord : parserLandbank) {
                    //4688 Lee Rd (side By Side)
                    String landbankAddress = landbankRecord.get(1).trim().replaceAll(" +", " ");
                    landbankAddress = landbankAddress.split("\\(")[0];
                    landbankAddress = landbankAddress.replaceAll("[^a-zA-Z0-9 ]", "").toUpperCase();

                    if(landbankAddress.equals(wardAddress)) {
                        landbanked = true;

                        if(landbanked) {
                            System.out.println("WARDNAME:" + wardName + " WARDADDR: " + wardAddress + " Landbank: " + landbankAddress);
                        }
                        matchesLandbank++;
                        break;
                    }
                }

                CSVParser parserpropertySales = CSVParser.parse(csvPropertySales, Charset.defaultCharset(), CSVFormat.DEFAULT);
                Boolean propertySalesed = false;
                for(CSVRecord propertySalesRecord : parserpropertySales) {
                    // #66 Address
                    // 9500 Lorain Ave
                    String propertySalesAddress = propertySalesRecord.get(66).trim().replaceAll(" +", " ");
                    //propertySalesAddress = propertySalesAddress.split("\\(")[0];
                    //propertySalesAddress = propertySalesAddress.replaceAll("[^a-zA-Z0-9 ]", "").toUpperCase();


                    if(propertySalesAddress.equals(wardAddress)) {
                        //Wardnames are FIRST M LAST


                        //new owner
                        //String propertySalesGrantee = propertySalesRecord.get(66).trim().replaceAll(" +", " ");

                        //seller LGRANTOR1
                        // JUPINA ELIZABETH B
                        // GANESH, RYAN
                        // ARROYO, JULIO L ETALL
                        // Al Sherbini Steve
                        String propertySalesGrantor = propertySalesRecord.get(5).trim().replaceAll(" +", " ");
                        propertySalesGrantor = propertySalesGrantor.replaceAll("ETALL", "").replaceAll("ETAL", "").replaceAll("ET AL", "");

                        if(propertySalesGrantor.contains(",")) {
                            String[] names = propertySalesGrantor.split(",");
                            if(names.length > 1) {
                                propertySalesGrantor = names[1] + " " + names[0];
                            }
                        } else {
                            //put last name first
                            String[] names = propertySalesGrantor.split(" ");
                            if(names.length > 1) {
                                propertySalesGrantor = StringUtils.join(names, " ", 1, names.length - 1) + " " + names[0];
                            }
                        }

                        if(StringUtils.getLevenshteinDistance(wardName, propertySalesGrantor) < 2) {
                            System.out.println("WARDNAME:" + wardName + " WARDADDR: " + wardAddress + " propertySales: " + propertySalesAddress + " grantor:" + propertySalesGrantor);
                            propertySalesed = true;
                            matchesPropertySales++;
                            break;
                        }
                    }
                }

                List<String> wardData = new ArrayList<String>();
                for(String element : wardRecord) {
                    wardData.add(element);
                }

                if(row == 0) {
                    wardData.add("isEvicted");
                    wardData.add("isForeclosed");
                    wardData.add("isLandbanked");
                    wardData.add("isPropertySold");
                } else {
                    wardData.add(evicted.toString());
                    wardData.add(foreclosed.toString());
                    wardData.add(landbanked.toString());
                    wardData.add(propertySalesed.toString());
                }
                csvFilePrinter.printRecord(wardData);

                row++;
            }

            fileWriter.flush();
            fileWriter.close();
            csvFilePrinter.close();

            Integer matches = matchesEvict + matchesForeclose + matchesLandbank;
            System.out.println("BOE Rows: " + row + " MatchesEvict: " + matchesEvict + " MatchesForeclose:"  + matchesForeclose + " MatchesLandbank:" + matchesLandbank + " MatchesPropertySales: " + matchesPropertySales + " Total Matches:" + matches + " Matches Percent: " + (matches/row));

        } catch (IOException e) {
            System.err.println(e.getMessage());
        }
    }
}
